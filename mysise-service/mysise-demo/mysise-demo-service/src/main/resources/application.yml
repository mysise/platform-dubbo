
server:
  port: 9080
  version: 1.0.0

mybatis-plus:
  mapper-locations: classpath:/mapper/*Mapper.xml
  type-aliases-package: org.mysise.demo.entity
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    jdbc-type-for-null: null

logging:
  level:
    com.baomidou.mybatisplus.samples.quickstart: debug
spring:
  datasource:
    druid:
      url: jdbc:mysql://localhost:3306/testdb?useUnicode=true&characterEncoding=utf-8&useSSL=false
      username: root
      password: 123456
      driver-class-name: com.mysql.jdbc.Driver
      #初始化时建立物理连接的个数
      initial-size: 5
      # 最大连接池数量
      max-active: 30
      # 最小连接池数量
      min-idle: 5
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
      max-pool-prepared-statement-per-connection-size: 50
      test-on-borrow: false
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      test-while-idle: true
      pool-prepared-statements: true
      # 用来检测连接是否有效的sql，要求是一个查询语句
      validation-query: SELECT 1 FROM DUAL
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计
      filters: stat,wall
      min-evictable-idle-time-millis: 300000
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=1000
      max-wait: 60000
      test-on-return: false
  application:
    name: demo-dubbo-provider
  aop:
    auto: true
    proxy-target-class: true
  dubbo:
    server: true
    registry: zookeeper://localhost:2181
    protocol:
      name: dubbo
      port: 20881
  # redis配置
  redis:
    # Redis数据库索引，默认0
    database: 0
    # Redis服务器地址
    host: localhost
    # Redis服务器端口号
    port: 6379
    # Redis密码
    password:
    jedis:
      pool:
        # 连接池最大连接数
        max-active: 8
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池中的最小空闲连接
        min-idle: 0
    # 连接超时时间（毫秒）
    timeout: 5000ms
    #redis集群配置
#    cluster:
#      nodes: 192.168.177.128:7001,192.168.177.128:7002,192.168.177.128:7003
#      max-redirects: 3